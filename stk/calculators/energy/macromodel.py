class MacroModelEnergy(EnergyCalculator):
    @exclude('macromodel_path')
    def macromodel(self,
                   forcefield,
                   macromodel_path,
                   output_dir=None,
                   conformer=-1):
        """
        Calculates the energy using macromodel.

        Note that this requires macromodel to be installed and have a
        valid license.

        Parameters
        ----------
        forcefield : :class:`int`
            The id number of the forcefield to be used by macromodel.

        macromodel_path : :class:`str`
            The full path to the Schrodinger suite within the
            user's machine. For example, in a default Linux
            installation the folder will probably be something like
            ``'/opt/schrodinger2017-2'``.

        output_dir : :class:`str`, optional
            The name of the directory into which files generated during
            the calculation are written, if ``None`` then
            :func:`uuid.uuid4` is used.

        conformer : :class:`int`, optional
            The conformer to use.

        Returns
        -------
        :class:`float`
            The calculated energy.

        Raises
        ------
        :class:`EnergyError`
            This exception is raised if no energy value is found in the
            MacroModel calculation's ``.log`` file. Likely due to a
            forcefield error.

        """

        # To prevent conflicts when running this function in parallel,
        # a temporary copy of the molecular structure file is made and
        # used for macromodel calculations.

        # Unique file name is generated by inserting a random int into
        # the file path.
        basename = str(uuid4().int)
        if output_dir is None:
            output_dir = basename

        tmp_file = f'{basename}.mol'
        self.molecule.write(tmp_file, conformer)

        convrt_app = os.path.join(macromodel_path,
                                  'utilities',
                                  'structconvert')
        convrt_cmd = [convrt_app,
                      tmp_file,
                      f'{basename}.mae']
        sp.call(convrt_cmd, stdout=sp.PIPE, stderr=sp.PIPE)

        # Create an input file and run it.
        input_script = (
         "{0}.mae\n"
         "{0}-out.maegz\n"
         " MMOD       0      1      0      0     0.0000     0.0000     "
         "0.0000     0.0000\n"
         " FFLD{1:8}      1      0      0     1.0000     0.0000     "
         "0.0000     0.0000\n"
         " BGIN       0      0      0      0     0.0000     0.0000     "
         "0.0000     0.0000\n"
         " READ      -1      0      0      0     0.0000     0.0000     "
         "0.0000     0.0000\n"
         " ELST      -1      0      0      0     0.0000     0.0000     "
         "0.0000     0.0000\n"
         " WRIT       0      0      0      0     0.0000     0.0000     "
         "0.0000     0.0000\n"
         " END       0      0      0      0     0.0000     0.0000     "
         "0.0000     0.0000\n\n"
        ).format(basename, forcefield)

        with open(f'{basename}.com', 'w') as f:
            f.write(input_script)

        cmd = [os.path.join(macromodel_path, 'bmin'),
               basename,
               "-WAIT",
               "-LOCAL"]
        sp.call(cmd)

        # Check if the license was found. If not run the function
        # again.
        with open(f'{basename}.log', 'r') as f:
            log_content = f.read()
        if ('FATAL -96: Could not check out a license for mmlibs' in
           log_content):
            return self.macromodel(forcefield,
                                   macromodel_path,
                                   conformer)

        # Read the .log file and return the energy.
        with open(f'{basename}.log', 'r') as f:
            for line in f:
                if "                   Total Energy =" in line:
                    eng = float(line.split()[-2].replace("=", ""))

        try:
            return eng
        except UnboundLocalError:
            raise EnergyError('MacroModel energy calculation failed.')

        finally:
            move_generated_macromodel_files(basename, output_dir)
